/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./ui/editor/colorEngine.js":
/*!**********************************!*\
  !*** ./ui/editor/colorEngine.js ***!
  \**********************************/
/***/ ((module) => {

eval("function nameToRgba(name) {\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    context.fillStyle = name;\r\n    context.fillRect(0,0,1,1);\r\n    return context.getImageData(0,0,1,1).data;\r\n}\r\n\r\nfunction handleColor(colorThing) {\r\n    var color = nameToRgba(colorThing)\r\n    color = [color[0], color[1], color[2]]\r\n    var darkerColors = []\r\n    var lighterColors = []\r\n    var shadowColors = []\r\n    var textColors = []\r\n    var darkenAmount = (Number(color[0]) + Number(color[1]) + Number(color[2])) / 3\r\n    if (darkenAmount < 70) {\r\n        textColors = [(255-darkenAmount), (255-darkenAmount), (255-darkenAmount)]\r\n        darkenAmount = ((255-darkenAmount) / 255) * 50\r\n        color.forEach(function(newColor) {\r\n            shadowColors.push(Number(newColor)+(darkenAmount*0.3))\r\n            darkerColors.push(Number(newColor)+(darkenAmount*0.6))\r\n            lighterColors.push(Number(newColor)+darkenAmount)\r\n        })\r\n    } else {\r\n        if (darkenAmount < 160) {\r\n            textColors = [darkenAmount+((255-darkenAmount)*0.6), darkenAmount+((255-darkenAmount)*0.6), darkenAmount+((255-darkenAmount)*0.6)]\r\n            darkenAmount = (darkenAmount / 255) * 200\r\n            color.forEach(function(newColor) {\r\n                shadowColors.push(Number(newColor)-Math.floor((Number(newColor)/255)*(darkenAmount)*1.5))\r\n                darkerColors.push(Number(newColor)-Math.floor((Number(newColor)/255)*(darkenAmount)))\r\n                lighterColors.push(Number(newColor)-(Math.floor((Number(newColor)/255)*(darkenAmount))*0.6))\r\n            })\r\n        } else {\r\n            if (darkenAmount > 230) {\r\n                textColors = [darkenAmount-((darkenAmount-150)*2.0), darkenAmount-((darkenAmount-150)*2.0), darkenAmount-((darkenAmount-150)*2.0)]\r\n            } else {\r\n                textColors = [darkenAmount+((255-darkenAmount)*0.6), darkenAmount+((255-darkenAmount)*0.6), darkenAmount+((255-darkenAmount)*0.6)]\r\n            }\r\n            darkenAmount = (darkenAmount / 255) * 100\r\n            color.forEach(function(newColor) {\r\n                shadowColors.push(Number(newColor)-Math.floor((Number(newColor)/255)*(darkenAmount)*1.5))\r\n                darkerColors.push(Number(newColor)-Math.floor((Number(newColor)/255)*(darkenAmount)))\r\n                lighterColors.push(Number(newColor)-(Math.floor((Number(newColor)/255)*(darkenAmount))*0.8))\r\n            })\r\n        }\r\n    }\r\n    document.body.style.setProperty('--shadow-color', shadowColors.join(\", \"))\r\n    document.body.style.setProperty('--accented-color', darkerColors.join(\", \"))\r\n    document.body.style.setProperty('--lighter-color', lighterColors.join(\", \"))\r\n    document.body.style.setProperty('--text-color', textColors.join(\", \"))\r\n}\r\n\r\nfunction beginObserving() {\r\n    handleColor(document.body.style.backgroundColor)\r\n    const observer = new MutationObserver(function() {\r\n        window.localStorage.setItem('color-theme', document.body.style.backgroundColor)\r\n        handleColor(document.body.style.backgroundColor)\r\n    });\r\n    \r\n    observer.observe(document.body, {\r\n      attributes: true,\r\n      subtree: true,\r\n      childList: true\r\n    });    \r\n}\r\n\r\nmodule.exports = {\r\n    beginObserving,\r\n    handleColor\r\n}\n\n//# sourceURL=webpack:///./ui/editor/colorEngine.js?");

/***/ }),

/***/ "./ui/editor/draggableUI.js":
/*!**********************************!*\
  !*** ./ui/editor/draggableUI.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nvar { UIElementGroup, BaseUIElement, Property, generateAnimation, addNewElementWithName } = __webpack_require__(/*! ../shared/ui */ \"./ui/shared/ui.js\")\r\nvar { addAnimation } = __webpack_require__(/*! ../shared/baseElements */ \"./ui/shared/baseElements.js\")\r\n\r\nclass TitleBar extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property(\"height: 30px\"),\r\n            new Property(\"background-color: rgb(var(--lighter-color))\"),\r\n            new Property(\"filter: drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0.6))\"),\r\n            new Property('font-family: \"Quicksand\"'),\r\n            new Property(\"line-height: 30px\"),\r\n            new Property(\"color: rgb(176 176 176)\"),\r\n            new Property(\"font-size: 20px\"),\r\n            new Property(\"padding-left: 10px\"),\r\n        ]\r\n    }\r\n    setTitle(title, isCentered) {\r\n        if (isCentered == true) {\r\n            this.setInnerHTML(title)\r\n            this.element.style.setProperty(\"transform\", 'translate(-50%, -50%)')\r\n            this.element.style.setProperty(\"text-align\", 'center')\r\n            this.element.style.setProperty(\"width\", '85%')\r\n            this.element.style.setProperty(\"padding-left\", '0px')\r\n            this.element.style.setProperty(\"position\", 'absolute')\r\n            this.element.style.setProperty(\"left\", '50%')\r\n            this.element.style.setProperty(\"top\", '50%')\r\n            this.element.style.setProperty(\"border-radius\", 'var(--spacing)')\r\n            return this    \r\n        } else {\r\n            this.setInnerHTML(title)\r\n            this.close = new BaseUIElement([\r\n                new Property(\"position: relative\"),\r\n                new Property(\"float: right\"),\r\n                new Property(\"width: 30px\"),\r\n                new Property(\"text-align: center\"),\r\n                new Property(\"cursor: pointer\"),\r\n                new Property(\"height: 30px\"),\r\n                new Property(\"background-color: rgba(var(--shadow-color), 0.4)\"),\r\n                new Property(\"border-top-left-radius: var(--spacing)\") \r\n            ])\r\n                .setInnerHTML(\"X\")\r\n            this.appendList([\r\n                this.close\r\n            ])\r\n            return this    \r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass DraggableWindows {\r\n    generateProps(left, isLeftOrRight, height, top, useScale)  {\r\n        if (left == 0) {\r\n            if (isLeftOrRight == true) {\r\n                return [\r\n                    new Property('position: absolute'),\r\n                    new Property('overflow: hidden'),\r\n                    new Property('background-color: rgb(var(--accented-color))'),\r\n                    new Property('width: 100%'),\r\n                    new Property('transition: box-shadow 0.2s, opacity 0.2s'),   \r\n                    new Property('--top-before: ' + top),   \r\n                    new Property('--top-after: ' + top),   \r\n                    new Property('--left-before: -100%'),   \r\n                    new Property('--left-after: 0px'),   \r\n                    new Property('height: ' + height + 'px'),\r\n                    new Property('border-top-right-radius: var(--spacing)'),   \r\n                    new Property('border-bottom-right-radius: var(--spacing)'),   \r\n                    ...addAnimation((useScale == true) ? 'scaleIn' : 'flyIn', '0.4s')        \r\n                ]\r\n            } else {\r\n                return [\r\n                    new Property('position: absolute'),\r\n                    new Property('background-color: rgb(var(--accented-color))'),\r\n                    new Property('width: 100%'),\r\n                    new Property('overflow: hidden'),\r\n                    new Property('--top-before: ' + top),   \r\n                    new Property('transition: box-shadow 0.2s, opacity 0.2s'),   \r\n                    new Property('--top-after: ' + top),   \r\n                    new Property('--right-before: -100%'),   \r\n                    new Property('--right-after: 0px'),   \r\n                    new Property('height: ' + height + 'px'),\r\n                    new Property('border-top-left-radius: var(--spacing)'),   \r\n                    new Property('border-bottom-left-radius: var(--spacing)'),   \r\n                    ...addAnimation((useScale == true) ? 'scaleIn' : 'flyIn', '0.4s')\r\n                ]        \r\n            }\r\n        } else {\r\n            return [\r\n                new Property('position: absolute'),\r\n                new Property('background-color: rgb(var(--lighter-color))'),\r\n                new Property('width: 100%'),\r\n                new Property('overflow: hidden'),\r\n                new Property('--top-before: ' + top),   \r\n                new Property('--top-after: ' + top),   \r\n                new Property('--scale-before: 80%'),   \r\n                new Property('transition: box-shadow 0.2s, opacity 0.2s'),   \r\n                new Property('--scale-after: 100%'),   \r\n                new Property('--left-before: 0px'),   \r\n                new Property('--left-after: 0px'),   \r\n                new Property('height: ' + height + 'px'),\r\n                new Property('border-radius: var(--spacing)'),   \r\n                ...addAnimation((useScale == true) ? 'scaleIn' : 'flyIn', '0.4s')\r\n            ]\r\n        }\r\n    }\r\n\r\n    constructor(rows) {\r\n        this.holder = new BaseUIElement([\r\n            new Property('position: absolute'),\r\n            new Property('top: calc(100px + var(--spacing))'),\r\n            new Property('height: calc(100% - (100px + (2 * var(--spacing))))'),\r\n            new Property('left: 0px'),\r\n            new Property('width: 100%'),\r\n        ])\r\n        this.holder.appendTo(document.body)\r\n        rows.forEach((row, index) => {\r\n            if (row.isMiddle == true) {\r\n                this.middleWindow = row\r\n            }\r\n        })\r\n        this.totalRowList = []\r\n        var isLeft = true\r\n        var curSpacing = 0\r\n        var spacingTimes = 0\r\n        var totalSize = 0\r\n        var totalSpacing = 0\r\n        rows.forEach((row, index) => {\r\n            var curList = []\r\n            if (row != this.middleWindow) {\r\n                if (isLeft == true) {\r\n                    var otherHolder = new BaseUIElement([\r\n                        new Property('position: absolute'),\r\n                        new Property('top: 0px'),\r\n                        new Property('height: 100%'),\r\n                        new Property('left: calc(' + curSpacing + 'px + ( ' + spacingTimes + ' * var(--spacing)))'),\r\n                        new Property('width: ' + row.width + 'px'),\r\n                    ])\r\n                    var totalUp = 0\r\n                    var totalSpacingThing = 0\r\n                    var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                    var heightTotal = (this.holder.element.getBoundingClientRect().height) - ((row.items.length-1) * spacingTotal)\r\n                    row.items.forEach((item) => {\r\n                        var addElement =  new BaseUIElement(\r\n                            this.generateProps(curSpacing, isLeft, (heightTotal*item.height), 'calc(' + totalUp + 'px + ( ' + totalSpacingThing + ' * ' + 'var(--spacing)))', true)\r\n                        )\r\n                        if (item.title != undefined) {\r\n                            addElement.appendList([\r\n                                new TitleBar()\r\n                                    .setTitle(item.title, true)\r\n                            ])\r\n                        }\r\n                        addElement.rowIndex = index\r\n                        addElement.isBlank = item.isBlank\r\n                        addElement.uniqueId = item.uniqueId\r\n                        addElement.beforeTop = addElement.element.style.getPropertyValue('--top-after')\r\n                        addElement.baseHeight = item.height\r\n                        curList.push(addElement)\r\n                        otherHolder.appendList([\r\n                           addElement\r\n                        ])\r\n                        totalUp += (heightTotal*item.height)\r\n                        totalSpacingThing += 1\r\n                    })\r\n                    curSpacing += row.width\r\n                    totalSize += row.width\r\n                    spacingTimes += 1    \r\n                    totalSpacing += 1\r\n                    this.holder.appendList([\r\n                        otherHolder\r\n                    ])\r\n                } else {\r\n                    var otherHolder = new BaseUIElement([\r\n                        new Property('position: absolute'),\r\n                        new Property('top: 0px'),\r\n                        new Property('height: 100%'),\r\n                        new Property('right: calc(' + curSpacing + 'px + ( ' + spacingTimes + ' * var(--spacing)))'),\r\n                        new Property('width: ' + row.width + 'px'),\r\n                    ])\r\n                    var totalUp = 0\r\n                    var totalSpacingThing = 0\r\n                    var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                    var heightTotal = (this.holder.element.getBoundingClientRect().height) - ((row.items.length-1) * spacingTotal)\r\n                    row.items.forEach((item) => {\r\n                        var addElement =  new BaseUIElement(\r\n                            this.generateProps(curSpacing, isLeft, (heightTotal*item.height), 'calc(' + totalUp + 'px + ( ' + totalSpacingThing + ' * ' + 'var(--spacing)))', true)\r\n                        )\r\n                        if (item.title != undefined) {\r\n                            addElement.appendList([\r\n                                new TitleBar()\r\n                                    .setTitle(item.title, true)\r\n                            ])\r\n                        }\r\n                        addElement.rowIndex = index\r\n                        addElement.isBlank = item.isBlank\r\n                        addElement.uniqueId = item.uniqueId\r\n                        addElement.beforeTop = addElement.element.style.getPropertyValue('--top-after')\r\n                        addElement.baseHeight = item.height\r\n                        curList.push(addElement)\r\n                        otherHolder.appendList([\r\n                           addElement\r\n                        ])\r\n                        totalUp += (heightTotal*item.height)\r\n                        totalSpacingThing += 1\r\n                    })\r\n                    curSpacing += row.width\r\n                    totalSize += row.width\r\n                    spacingTimes += 1\r\n                    totalSpacing += 1\r\n                    this.holder.appendList([\r\n                        otherHolder\r\n                    ])\r\n                }\r\n            } else {\r\n                isLeft = false\r\n                curSpacing = 0\r\n                spacingTimes = 0 \r\n            }\r\n            this.totalRowList.push(curList)\r\n        })\r\n        var middleHolder = new BaseUIElement([\r\n            new Property('position: absolute'),\r\n            new Property('top: 0px'),\r\n            new Property('height: 100%'),\r\n            new Property('right: calc(' + curSpacing + 'px + ( ' + spacingTimes + ' * var(--spacing)))'),\r\n            new Property('width: ' + 'calc(100% - (' + totalSize + 'px + (' + totalSpacing + ' * var(--spacing))))'),\r\n        ])\r\n\r\n        middleHolder.appendList([\r\n            new BaseUIElement(\r\n                this.generateProps(50, true, this.holder.element.getBoundingClientRect().height, '0px', true)\r\n            )\r\n        ])\r\n\r\n        this.holder.appendList([\r\n            middleHolder\r\n        ])\r\n    }\r\n    onDrag(element, mousePosition, originPos) {\r\n        var xVal = mousePosition.clientX\r\n        var yVal = mousePosition.clientY\r\n        var doesWork = false\r\n        var updateElemPos = true\r\n        this.totalRowList.forEach((items) => {\r\n            items.forEach((item) => {\r\n                var boundingBox = item.element.getBoundingClientRect()\r\n                var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                var heightTotal = ((this.holder.element.getBoundingClientRect().height) - ((items.length-1) * spacingTotal)) * item.baseHeight\r\n                boundingBox.y = boundingBox.y - item.heightRemoval\r\n                var doesFallWithin = (xVal >= boundingBox.x && yVal >= boundingBox.y && xVal <= (boundingBox.x + boundingBox.width) && yVal <= (boundingBox.y + heightTotal))\r\n                if (doesFallWithin && (item.uniqueId != element.uniqueId)) {\r\n\r\n                    // check top third\r\n                    var fallsWithinTopThird = (xVal >= boundingBox.x && yVal >= boundingBox.y && xVal <= (boundingBox.x + boundingBox.width) && yVal <= (boundingBox.y + (0.33 * heightTotal)))\r\n                    var fallsWithinBottomThird = (xVal >= boundingBox.x && yVal >= (boundingBox.y + (0.66 * heightTotal)) && xVal <= (boundingBox.x + boundingBox.width) && yVal <= (boundingBox.y + heightTotal))\r\n\r\n                    if (item.isBlank == true) {\r\n                        fallsWithinTopThird = false\r\n                        fallsWithinBottomThird = false\r\n                    }\r\n                    if (fallsWithinTopThird == true) {\r\n                        updateElemPos = false\r\n                        this.itemReplacing = undefined\r\n                        this.topOf = item\r\n                        this.bottomOf = undefined                    \r\n                        item.element.style.animation = 'none'\r\n                        element.element.style.opacity = '1'\r\n                        item.element.style.boxShadow = '0px 0px 0px 0px white inset'\r\n                        item.element.style.height = 'calc(' + (heightTotal * 0.5) + 'px - (0.5 * var(--spacing)))'\r\n                        element.element.style.left = boundingBox.x + 'px'\r\n                        element.element.style.top = (boundingBox.y - (spacingTotal*0.5)) + 'px'    \r\n                        element.element.style.height = 'calc(' + (heightTotal * 0.5) + 'px - (0.5 * var(--spacing)))'            \r\n                        item.element.style.top = item.beforeTop.split('var(--spacing)))')[0] + 'var(--spacing)) + ' + (heightTotal * 0.5) + 'px + (0.5 * var(--spacing)))'\r\n                        item.heightRemoval = (heightTotal * 0.5)\r\n                    } else {\r\n                        if (fallsWithinBottomThird == true) {\r\n                            updateElemPos = false\r\n                            this.itemReplacing = undefined\r\n                            this.topOf = undefined\r\n                            this.bottomOf = item\r\n                            item.element.style.boxShadow = '0px 0px 0px 0px white inset'\r\n                            element.element.style.left = boundingBox.x + 'px'\r\n                            element.element.style.top = 'calc(' + (boundingBox.y + (heightTotal * 0.5)) + 'px)'\r\n                            item.element.style.top = item.beforeTop\r\n                            item.heightRemoval = 0\r\n                            element.element.style.opacity = '1'\r\n                            element.element.style.height = 'calc(' + (heightTotal * 0.5) + 'px)'\r\n                            item.element.style.height = 'calc(' + (heightTotal * 0.5) + 'px - var(--spacing))'\r\n                        } else {\r\n                            item.heightRemoval = 0\r\n                            item.element.style.height = heightTotal + 'px'\r\n                            item.element.style.top = item.beforeTop\r\n                            element.element.style.opacity = '0.3'\r\n                            item.element.style.boxShadow = '0px 0px 0px 2px white inset'\r\n                            this.itemReplacing = item\r\n                            this.topOf = undefined\r\n                            this.bottomOf = undefined        \r\n                        }\r\n                    }\r\n                    item.element.style.opacity = '1'\r\n                    doesWork = true\r\n                } else {\r\n                    item.element.style.boxShadow = '0px 0px 0px 0px white inset'\r\n                    item.element.style.height = heightTotal + 'px'\r\n                    item.element.style.top = item.beforeTop\r\n                    item.element.style.opacity = '0.5'\r\n                    item.heightRemoval = 0\r\n                }\r\n            })\r\n        })\r\n        if (doesWork == false) {\r\n            element.element.style.opacity = '1'\r\n            element.element.style.width = element.beforeWidth + 'px'\r\n            element.element.style.height = element.beforeHeight + 'px'\r\n            this.itemReplacing = undefined\r\n            this.topOf = undefined\r\n            this.bottomOf = undefined\r\n        }\r\n        if (updateElemPos == true) {\r\n            element.element.style.left = (mousePosition.clientX - originPos.x) + 'px'\r\n            element.element.style.top = (mousePosition.clientY - originPos.y) + 'px'    \r\n        }\r\n    }\r\n}\r\n\r\nvar isVisible = false\r\n\r\nasync function onDrag(mousePos, draggingElement, rowList) {\r\n    rowList.forEach(function(item) {\r\n        if (item.isMiddle != true && item.items.length == 0) {\r\n            var nonUsedUniqueId = 0\r\n            while (true) {\r\n                var isUsed = false\r\n                for (var list in rowList) {\r\n                    if (rowList[list].items != undefined) {\r\n                        for (var itemThing in rowList[list].items) {\r\n                            if (rowList[list].items[itemThing].uniqueId == nonUsedUniqueId) {\r\n                                nonUsedUniqueId += 1\r\n                                isUsed = true\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (isUsed == false) {\r\n                    break\r\n                }\r\n            }\r\n            item.items.push({\r\n                height: 1,\r\n                uniqueId: nonUsedUniqueId,\r\n                isBlank: true\r\n            })\r\n        }\r\n    })\r\n    return new Promise((resolve, reject) => {\r\n        var boundingBox = draggingElement.element.getBoundingClientRect()\r\n        var originPos = {\r\n            x: (mousePos.x - boundingBox.x),\r\n            y: (mousePos.y - boundingBox.y)\r\n        }\r\n        draggingElement.element.style.width = boundingBox.width + 'px'\r\n        draggingElement.element.style.animation = 'none'\r\n        draggingElement.element.style.transition = 'opacity 0.2s'\r\n        draggingElement.element.style.left = (mousePos.x - originPos.x) + 'px'\r\n        draggingElement.element.style.top = (mousePos.y - originPos.y) + 'px'\r\n        draggingElement.element.style.zIndex = 10\r\n        draggingElement.beforeHeight = boundingBox.height\r\n        draggingElement.beforeWidth = boundingBox.width\r\n\r\n        draggingElement.element.remove()\r\n        document.body.appendChild(draggingElement.element)\r\n        document.getElementById('default-window-holder').style.display = 'none'\r\n        if (isVisible == false) {\r\n            isVisible = true\r\n            console.log(rowList)\r\n            var windows = new DraggableWindows(rowList)\r\n            window.onmousemove = async function(e2) {\r\n                e2.preventDefault()\r\n                windows.onDrag(draggingElement, e2, originPos)\r\n            }\r\n            window.onmouseup = async function () {\r\n                window.onmousemove = function() {}\r\n                windows.holder.element.remove()\r\n                if (windows.topOf != undefined || windows.itemReplacing != undefined || windows.bottomOf != undefined) {\r\n                    console.log(rowList)\r\n                    var baseElem = rowList[draggingElement.rowIndex].items.find((item) => {\r\n                        if (item.uniqueId == draggingElement.uniqueId) {\r\n                            return item\r\n                        }\r\n                    })\r\n                    \r\n                    rowList[draggingElement.rowIndex].items.splice(rowList[draggingElement.rowIndex].items.indexOf(baseElem), 1)\r\n                    var totalHeightAdded = (baseElem.height/rowList[draggingElement.rowIndex].items.length)\r\n                    rowList[draggingElement.rowIndex].items.forEach(function(item) {\r\n                        item.height += totalHeightAdded\r\n                    })\r\n                    \r\n\r\n                    if (windows.itemReplacing != undefined) {\r\n                        console.log(windows.itemReplacing)\r\n                        var replacingElement = rowList[windows.itemReplacing.rowIndex].items.find((item) => {\r\n                            if (item.uniqueId == windows.itemReplacing.uniqueId) {\r\n                                return item\r\n                            }\r\n                        })\r\n                        console.log(replacingElement)\r\n\r\n                        var originIndex = rowList[windows.itemReplacing.rowIndex].items.indexOf(replacingElement)\r\n                        rowList[windows.itemReplacing.rowIndex].items.splice(rowList[windows.itemReplacing.rowIndex].items.indexOf(replacingElement), 1)\r\n                        baseElem.height = replacingElement.height\r\n\r\n                        rowList[windows.itemReplacing.rowIndex].items.splice(originIndex, 0, baseElem)\r\n                    } else {\r\n                        if (windows.topOf != undefined) {\r\n                            var belowElement = rowList[windows.topOf.rowIndex].items.find((item) => {\r\n                                if (item.uniqueId == windows.topOf.uniqueId) {\r\n                                    return item\r\n                                }\r\n                            })\r\n\r\n                            baseElem.height = (belowElement.height * 0.5)\r\n\r\n                            rowList[windows.topOf.rowIndex].items[rowList[windows.topOf.rowIndex].items.indexOf(belowElement)].height = (belowElement.height * 0.5)\r\n                            rowList[windows.topOf.rowIndex].items.splice(\r\n                                (rowList[windows.topOf.rowIndex].items.indexOf(belowElement) - 1),\r\n                                0,\r\n                                baseElem\r\n                            )\r\n\r\n                        } else {\r\n                            if (windows.bottomOf != undefined) {\r\n                                var aboveElement = rowList[windows.bottomOf.rowIndex].items.find((item) => {\r\n                                    if (item.uniqueId == windows.bottomOf.uniqueId) {\r\n                                        return item\r\n                                    }\r\n                                })\r\n        \r\n                                baseElem.height = (aboveElement.height * 0.5)\r\n        \r\n                                rowList[windows.bottomOf.rowIndex].items[rowList[windows.bottomOf.rowIndex].items.indexOf(aboveElement)].height = (aboveElement.height * 0.5)\r\n                                rowList[windows.bottomOf.rowIndex].items.splice(\r\n                                    (rowList[windows.bottomOf.rowIndex].items.indexOf(aboveElement) + 1),\r\n                                    0,\r\n                                    baseElem\r\n                                )\r\n\r\n        \r\n                            }\r\n        \r\n                        }\r\n                    }\r\n                }\r\n                draggingElement.element.style.width = '100%'\r\n                draggingElement.element.style.animation = 'none'\r\n                draggingElement.element.style.transition = 'none'\r\n                draggingElement.element.style.top = '0px'\r\n                draggingElement.element.style.width = '100%'\r\n                draggingElement.element.style.height = draggingElement.beforeHeight + 'px'\r\n                draggingElement.element.style.left = '0px'\r\n                draggingElement.element.style.animationName = 'flyIn'\r\n                draggingElement.element.style.animationDuration = '0.4s'\r\n                draggingElement.element.style.animationFillMode = 'forwards'\r\n                draggingElement.element.style.zIndex = 1\r\n                draggingElement.element.remove()\r\n                draggingElement.originalParent.element.appendChild(draggingElement.element)\r\n                rowList.forEach(function(itemList) {\r\n                    if (itemList.items != undefined) {\r\n                        if (itemList.items[0] != undefined) {\r\n                            if (itemList.items[0].isBlank == true) {\r\n                                itemList.items = []\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                document.getElementById('default-window-holder').style.display = 'block'\r\n                isVisible = false\r\n                resolve(rowList)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nmodule.exports = {\r\n    onDrag\r\n}\n\n//# sourceURL=webpack:///./ui/editor/draggableUI.js?");

/***/ }),

/***/ "./ui/editor/viewerElements.js":
/*!*************************************!*\
  !*** ./ui/editor/viewerElements.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var { UIElementGroup, BaseUIElement, Property, generateAnimation, addNewElementWithName } = __webpack_require__(/*! ../shared/ui */ \"./ui/shared/ui.js\")\r\nvar { addAnimation } = __webpack_require__(/*! ../shared/baseElements */ \"./ui/shared/baseElements.js\")\r\nvar { onDrag } = __webpack_require__(/*! ./draggableUI */ \"./ui/editor/draggableUI.js\")\r\nvar { LoadingSpinner } = __webpack_require__(/*! ../shared/uiComponents */ \"./ui/shared/uiComponents.js\")\r\n\r\nclass Ripple extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('background-color: white'),\r\n            new Property('border-radius: 50%'),\r\n            new Property('position: absolute'),\r\n            new Property('left: 0px;'),\r\n            new Property('width: 200%'),\r\n            new Property('transition: 0.5s'),\r\n            new Property('transform: translate(-50%, -50%) scale(0.1)'),\r\n            new Property('aspect-ratio: 1 / 1'),\r\n            new Property('filter: blur(50px) opacity(0.2)'),\r\n            ...addAnimation('rippleEffect', '0.5s')\r\n        ]\r\n    }\r\n}\r\n\r\nclass Button extends BaseUIElement {\r\n    baseProperties() {\r\n        this.bindEvents()\r\n        return [\r\n            new Property('border-radius: var(--spacing)'),\r\n            new Property('overflow: hidden'),\r\n            new Property('font-family: \"Quicksand\"'),\r\n            new Property('transition: 0.25s'),\r\n            new Property('background-color: rgb(var(--lighter-color))'),\r\n            new Property('filter: drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0))'),\r\n            new Property('border-radius: var(--spacing)'),\r\n        ]\r\n    }\r\n\r\n    bindEvents() {\r\n        this.bind('mousedown', (e) => {\r\n            this.element.style.filter = 'drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0))'\r\n            if (this.ripple != undefined) {\r\n                this.ripple.element.remove()\r\n                this.ripple = undefined    \r\n            }\r\n            var bounding = this.element.getBoundingClientRect()\r\n            this.ripple = new Ripple([\r\n                new Property('left: ' + (e.clientX - bounding.x) + 'px'),\r\n                new Property('top: ' + (e.clientY - bounding.y) + 'px')\r\n            ])\r\n            this.element.appendChild(this.ripple.element)\r\n        })\r\n        this.bind('mouseup', async () => {\r\n            this.element.style.filter = 'drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0.6))'\r\n            var rippleElement = this.ripple\r\n            rippleElement.element.style.filter = 'blur(50px) opacity(0)'\r\n            this.ripple = undefined\r\n            await new Promise(resolve => setTimeout(resolve, 500));\r\n            rippleElement.element.remove()\r\n        })\r\n        this.bind('mouseover', async () => {\r\n            if (this.ripple == undefined) {\r\n                this.element.style.filter = 'drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0.6))'\r\n            }\r\n        })\r\n        this.bind('mouseleave', async () => {\r\n            this.element.style.filter = 'drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0))'\r\n            if (this.ripple != undefined) {\r\n                var rippleElement = this.ripple\r\n                rippleElement.element.style.filter = 'blur(50px) opacity(0)'\r\n                this.ripple = undefined\r\n                await new Promise(resolve => setTimeout(resolve, 500));\r\n                rippleElement.element.remove()    \r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nclass WindowTitle extends BaseUIElement {\r\n    baseProperties() {\r\n    }\r\n}\r\nclass BaseImageLoader extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('border-radius: var(--spacing)'),\r\n            new Property('background-repeat: no-repeat'),\r\n            new Property('background-size: contain'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('position: absolute'),\r\n            new Property('left: 50%'),\r\n            new Property('top: 0px')\r\n        ]\r\n    }\r\n}\r\n\r\nfunction showLoader(image, height) {\r\n    if (image != undefined) {\r\n        var totalHeight = '(' + height + 'px + (2 * var(--spacing)) + ' + (height/4) + 'px)'\r\n        var loaderHolder = new BaseUIElement([\r\n            new Property('width: ' + height + 'px'),\r\n            new Property('height: calc' + totalHeight),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translate(-50%, -50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: 50%'),\r\n            ...addAnimation('baseTransitionIn', '0.6s')\r\n        ])\r\n        var image = new BaseImageLoader([\r\n            new Property('background-image: url(\"' + image + '\")'),\r\n            new Property('width: ' + height + 'px'),\r\n            new Property('height: ' + height + 'px'),\r\n        ])\r\n        var spin = new LoadingSpinner([\r\n            new Property('width: ' + (height/4) + 'px'),\r\n            new Property('height: ' + (height/4) + 'px'),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: calc(100% - ' + (height/4) + 'px)'),\r\n        ])\r\n        loaderHolder.appendList([\r\n            image,\r\n            spin\r\n        ])\r\n        loaderHolder.transitionOut = function() {\r\n            loaderHolder.element.style.animation = 'baseTransitionOut 0.6s forwards'\r\n        }\r\n        return loaderHolder    \r\n    } else {\r\n        var loaderHolder = new BaseUIElement([\r\n            new Property('width: ' + (height/4) + 'px'),\r\n            new Property('height: ' + (height/4) + 'px'),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translate(-50%, -50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: 50%'),\r\n            ...addAnimation('baseTransitionIn', '0.6s')\r\n        ])\r\n        var spin = new LoadingSpinner([\r\n            new Property('width: ' + (height/4) + 'px'),\r\n            new Property('height: ' + (height/4) + 'px'),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: 0px'),\r\n        ])\r\n        loaderHolder.appendList([\r\n            spin\r\n        ])\r\n        loaderHolder.transitionOut = function() {\r\n            loaderHolder.element.style.animation = 'baseTransitionOut 0.6s forwards'\r\n        }\r\n        return loaderHolder    \r\n    }\r\n}\r\n\r\nclass TopUI extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('position: absolute'),\r\n            new Property('background-color: rgb(var(--accented-color))'),\r\n            new Property('width: calc(100% - (2 * var(--spacing)))'),\r\n            new Property('--top-before: -100px'),   \r\n            new Property('--top-after: 0px'),   \r\n            new Property('--left-before: var(--spacing)'),   \r\n            new Property('--left-after: var(--spacing)'),   \r\n            new Property('height: 100px'),\r\n            new Property('border-bottom-left-radius: var(--spacing)'),   \r\n            new Property('border-bottom-right-radius: var(--spacing)'),   \r\n            ...addAnimation('flyIn', '0.4s')\r\n        ]\r\n    }\r\n}\r\n\r\nclass RightUI extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('position: absolute'),\r\n            new Property('background-color: rgb(var(--accented-color))'),\r\n            new Property('width: 200px'),\r\n            new Property('--top-before: calc(100px + var(--spacing))'),   \r\n            new Property('--top-after: calc(100px + var(--spacing))'),   \r\n            new Property('--right-before: -200px'),   \r\n            new Property('--right-after: 0px'),   \r\n            new Property('height: calc(100% - (100px + (2 * var(--spacing))))'),\r\n            new Property('border-top-left-radius: var(--spacing)'),   \r\n            new Property('border-bottom-left-radius: var(--spacing)'),   \r\n            ...addAnimation('flyIn', '0.4s')\r\n        ]\r\n    }\r\n}\r\n\r\nclass LeftUI extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('position: absolute'),\r\n            new Property('background-color: rgb(var(--accented-color))'),\r\n            new Property('width: 200px'),\r\n            new Property('--top-before: calc(100px + var(--spacing))'),   \r\n            new Property('--top-after: calc(100px + var(--spacing))'),   \r\n            new Property('--left-before: -200px'),   \r\n            new Property('--left-after: 0px'),   \r\n            new Property('height: calc(100% - (100px + (2 * var(--spacing))))'),\r\n            new Property('border-top-right-radius: var(--spacing)'),   \r\n            new Property('border-bottom-right-radius: var(--spacing)'),   \r\n            ...addAnimation('flyIn', '0.4s')\r\n        ]\r\n    }\r\n}\r\n\r\nclass MiddleUI extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('position: absolute'),\r\n            new Property('background-color: rgb(var(--lighter-color))'),\r\n            new Property('width: calc(100% - ((2 * 200px) + (2 * var(--spacing))))'),\r\n            new Property('--top-before: calc(100px + var(--spacing))'),   \r\n            new Property('--top-after: calc(100px + var(--spacing))'),   \r\n            new Property('--scale-before: 80%'),   \r\n            new Property('--scale-after: 100%'),   \r\n            new Property('--left-before: calc(200px + var(--spacing))'),   \r\n            new Property('--left-after: calc(200px + var(--spacing))'),   \r\n            new Property('height: calc(100% - (100px + (2 * var(--spacing))))'),\r\n            new Property('border-radius: var(--spacing)'),   \r\n            ...addAnimation('flyIn', '0.4s')\r\n        ]\r\n    }\r\n}\r\n\r\nasync function prepareSettings(settings) {\r\n    for (var key in settings) {\r\n        document.body.style.setProperty('--' + key, settings[key])\r\n    }\r\n}\r\n\r\nfunction intialAnimation() {\r\n    generateAnimation('baseTransitionIn', [\r\n        {\r\n            percent: 0,\r\n            props: [\r\n                new Property('transform: translate(-50%, -50%) scale(0.8)'),\r\n                new Property('top: 50%'),\r\n                new Property('opacity: 0'),\r\n            ]\r\n        },\r\n        {\r\n            percent: 100,\r\n            props: [\r\n                new Property('transform: translate(-50%, -50%) scale(1)'),\r\n                new Property('top: 50%'),\r\n                new Property('opacity: 1'),\r\n            ]\r\n        }\r\n    ])\r\n    generateAnimation('baseTransitionOut', [\r\n        {\r\n            percent: 0,\r\n            props: [\r\n                new Property('transform: translate(-50%, -50%) scale(1)'),\r\n                new Property('top: 50%'),\r\n                new Property('opacity: 1'),\r\n            ]\r\n        },\r\n        {\r\n            percent: 100,\r\n            props: [\r\n                new Property('transform: translate(-50%, -50%) scale(0.8)'),\r\n                new Property('top: 50%'),\r\n                new Property('opacity: 0'),\r\n            ]\r\n        }\r\n    ])\r\n    generateAnimation('rippleEffect', [\r\n        {\r\n            percent: 0,\r\n            props: [\r\n                new Property('transform: translate(-50%, -50%) scale(0.1)'),\r\n            ]\r\n        },\r\n        {\r\n            percent: 100,\r\n            props: [\r\n                new Property('transform: translate(-50%, -50%) scale(1)'),\r\n            ]\r\n        }\r\n    ])\r\n    generateAnimation('flyIn', [\r\n        {\r\n            percent: 0,\r\n            props: [\r\n                new Property('top: var(--top-before)'),\r\n                new Property('left: var(--left-before)'),\r\n                new Property('right: var(--right-before)'),\r\n                new Property('transform: scale(var(--scale-before))'),\r\n                new Property('opacity: 0')\r\n            ]\r\n        },\r\n        {\r\n            percent: 100,\r\n            props: [\r\n                new Property('top: var(--top-after)'),\r\n                new Property('left: var(--left-after)'),\r\n                new Property('right: var(--right-after)'),\r\n                new Property('transform: scale(var(--scale-after))'),\r\n                new Property('opacity: 1')\r\n            ]\r\n        }\r\n    ])\r\n    generateAnimation('scaleIn', [\r\n        {\r\n            percent: 0,\r\n            props: [\r\n                new Property('top: var(--top-after)'),\r\n                new Property('left: var(--left-after)'),\r\n                new Property('right: var(--right-after)'),\r\n                new Property('transform: scale(0.7)'),\r\n                new Property('opacity: 0')\r\n            ]\r\n        },\r\n        {\r\n            percent: 100,\r\n            props: [\r\n                new Property('top: var(--top-after)'),\r\n                new Property('left: var(--left-after)'),\r\n                new Property('right: var(--right-after)'),\r\n                new Property('transform: scale(1)'),\r\n                new Property('opacity: 0.6')\r\n            ]\r\n        }\r\n    ])\r\n}\r\n\r\nclass TitleBar extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property(\"height: 30px\"),\r\n            new Property(\"background-color: rgb(var(--lighter-color))\"),\r\n            new Property(\"filter: drop-shadow(2px 4px 6px rgba(var(--shadow-color), 0.6))\"),\r\n            new Property('font-family: \"Quicksand\"'),\r\n            new Property(\"line-height: 30px\"),\r\n            new Property(\"color: rgb(176 176 176)\"),\r\n            new Property(\"font-size: 20px\"),\r\n            new Property(\"padding-left: 10px\"),\r\n        ]\r\n    }\r\n    setTitle(title, isCentered) {\r\n        if (isCentered == true) {\r\n            this.setInnerHTML(title)\r\n            this.element.style.setProperty(\"transform\", 'translate(-50%, -50%)')\r\n            this.element.style.setProperty(\"text-align\", 'center')\r\n            this.element.style.setProperty(\"width\", '85%')\r\n            this.element.style.setProperty(\"padding-left\", '0px')\r\n            this.element.style.setProperty(\"position\", 'absolute')\r\n            this.element.style.setProperty(\"left\", '50%')\r\n            this.element.style.setProperty(\"top\", '50%')\r\n            this.element.style.setProperty(\"border-radius\", 'var(--spacing)')\r\n            return this    \r\n        } else {\r\n            this.setInnerHTML(title)\r\n            this.close = new BaseUIElement([\r\n                new Property(\"position: relative\"),\r\n                new Property(\"float: right\"),\r\n                new Property(\"width: 30px\"),\r\n                new Property(\"text-align: center\"),\r\n                new Property(\"cursor: pointer\"),\r\n                new Property(\"height: 30px\"),\r\n                new Property(\"background-color: rgba(var(--shadow-color), 0.4)\"),\r\n                new Property(\"border-top-left-radius: var(--spacing)\") \r\n            ])\r\n                .setInnerHTML(\"X\")\r\n            this.appendList([\r\n                this.close\r\n            ])\r\n            return this    \r\n        }\r\n    }\r\n}\r\n\r\nclass Windows {\r\n    generateProps(left, isLeftOrRight, height, top)  {\r\n        if (left == 0) {\r\n            if (isLeftOrRight == true) {\r\n                return [\r\n                    new Property('position: absolute'),\r\n                    new Property('overflow: hidden'),\r\n                    new Property('background-color: rgb(var(--accented-color))'),\r\n                    new Property('width: 100%'),\r\n                    new Property('--top-before: ' + top),   \r\n                    new Property('--top-after: ' + top),   \r\n                    new Property('--left-before: -100%'),   \r\n                    new Property('--left-after: 0px'),   \r\n                    new Property('height: ' + height + 'px'),\r\n                    new Property('border-top-right-radius: var(--spacing)'),   \r\n                    new Property('border-bottom-right-radius: var(--spacing)'),   \r\n                    ...addAnimation('flyIn', '0.4s')        \r\n                ]\r\n            } else {\r\n                return [\r\n                    new Property('position: absolute'),\r\n                    new Property('background-color: rgb(var(--accented-color))'),\r\n                    new Property('width: 100%'),\r\n                    new Property('overflow: hidden'),\r\n                    new Property('--top-before: ' + top),   \r\n                    new Property('--top-after: ' + top),   \r\n                    new Property('--right-before: -100%'),   \r\n                    new Property('--right-after: 0px'),   \r\n                    new Property('height: ' + height + 'px'),\r\n                    new Property('border-top-left-radius: var(--spacing)'),   \r\n                    new Property('border-bottom-left-radius: var(--spacing)'),   \r\n                    ...addAnimation('flyIn', '0.4s')\r\n                ]        \r\n            }\r\n        } else {\r\n            return [\r\n                new Property('position: absolute'),\r\n                new Property('background-color: rgb(var(--lighter-color))'),\r\n                new Property('width: 100%'),\r\n                new Property('overflow: hidden'),\r\n                new Property('--top-before: ' + top),   \r\n                new Property('--top-after: ' + top),   \r\n                new Property('--scale-before: 80%'),   \r\n                new Property('--scale-after: 100%'),   \r\n                new Property('--left-before: 0px'),   \r\n                new Property('--left-after: 0px'),   \r\n                new Property('height: ' + height + 'px'),\r\n                new Property('border-radius: var(--spacing)'),   \r\n                ...addAnimation('flyIn', '0.4s')\r\n            ]\r\n        }\r\n    }\r\n\r\n    constructor(rows) {\r\n        this.baseUI = rows\r\n        this.holder = new BaseUIElement([\r\n            new Property('position: absolute'),\r\n            new Property('top: calc(100px + var(--spacing))'),\r\n            new Property('height: calc(100% - (100px + (2 * var(--spacing))))'),\r\n            new Property('left: 0px'),\r\n            new Property('width: 100%'),\r\n        ])\r\n        this.holder.setId('default-window-holder')\r\n        this.holder.appendTo(document.body)\r\n        rows.forEach((row, index) => {\r\n            if (row.isMiddle == true) {\r\n                this.middleWindow = row\r\n            }\r\n        })\r\n        var isLeft = true\r\n        var curSpacing = 0\r\n        this.totalRowList = []\r\n        this.totalItemList = []\r\n        var spacingTimes = 0\r\n        var totalSize = 0\r\n        var totalSpacing = 0\r\n        rows.forEach((row, index) => {\r\n            var curList = []\r\n            var rowItem = {}\r\n            rowItem.items = []\r\n            if (row != this.middleWindow) {\r\n                if (isLeft == true) {\r\n                    var otherHolder = new BaseUIElement([\r\n                        new Property('position: absolute'),\r\n                        new Property('top: 0px'),\r\n                        new Property('height: 100%'),\r\n                        new Property('left: calc(' + curSpacing + 'px + ( ' + spacingTimes + ' * var(--spacing)))'),\r\n                        new Property('width: ' + row.width + 'px'),\r\n                    ])\r\n                    rowItem.holder = otherHolder\r\n                    rowItem.isLeft = isLeft\r\n                    var totalUp = 0\r\n                    var totalSpacingThing = 0\r\n                    var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                    var heightTotal = (this.holder.element.getBoundingClientRect().height) - ((row.items.length-1) * spacingTotal)\r\n                    row.items.forEach((item) => {\r\n                        var baseElement = new BaseUIElement(\r\n                            this.generateProps(curSpacing, isLeft, (heightTotal*item.height), 'calc(' + totalUp + 'px + ( ' + totalSpacingThing + ' * ' + 'var(--spacing)))')\r\n                        )\r\n                        baseElement.originalParent = otherHolder\r\n                        baseElement.title = new TitleBar()\r\n                            .setTitle(item.title)\r\n                        baseElement.rowIndex = index\r\n                        baseElement.uniqueId = item.uniqueId\r\n                        baseElement.title.appendTo(baseElement.element)\r\n\r\n                        curList.push(baseElement)\r\n                        rowItem.items.push(baseElement)\r\n                        otherHolder.appendList([\r\n                            baseElement\r\n                        ])\r\n                        totalUp += (heightTotal*item.height)\r\n                        totalSpacingThing += 1\r\n                    })\r\n                    curSpacing += row.width\r\n                    totalSize += row.width\r\n                    spacingTimes += 1    \r\n                    totalSpacing += 1\r\n                    this.holder.appendList([\r\n                        otherHolder\r\n                    ])\r\n                } else {\r\n                    var otherHolder = new BaseUIElement([\r\n                        new Property('position: absolute'),\r\n                        new Property('top: 0px'),\r\n                        new Property('height: 100%'),\r\n                        new Property('right: calc(' + curSpacing + 'px + ( ' + spacingTimes + ' * var(--spacing)))'),\r\n                        new Property('width: ' + row.width + 'px'),\r\n                    ])\r\n                    rowItem.holder = otherHolder\r\n                    rowItem.isLeft = isLeft\r\n                    var totalUp = 0\r\n                    var totalSpacingThing = 0\r\n                    var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                    var heightTotal = (this.holder.element.getBoundingClientRect().height) - ((row.items.length-1) * spacingTotal)\r\n                    row.items.forEach((item) => {\r\n                        var baseElement = new BaseUIElement(\r\n                            this.generateProps(curSpacing, isLeft, (heightTotal*item.height), 'calc(' + totalUp + 'px + ( ' + totalSpacingThing + ' * ' + 'var(--spacing)))')\r\n                        )\r\n                        baseElement.originalParent = otherHolder\r\n                        baseElement.title = new TitleBar()\r\n                            .setTitle(item.title)\r\n                        baseElement.rowIndex = index\r\n                        baseElement.uniqueId = item.uniqueId    \r\n                        baseElement.title.appendTo(baseElement.element)\r\n                        curList.push(baseElement)\r\n                        rowItem.items.push(baseElement)\r\n                        otherHolder.appendList([\r\n                            baseElement\r\n                        ])\r\n                        totalUp += (heightTotal*item.height)\r\n                        totalSpacingThing += 1\r\n                    })\r\n                    curSpacing += row.width\r\n                    totalSize += row.width\r\n                    spacingTimes += 1\r\n                    totalSpacing += 1\r\n                    this.holder.appendList([\r\n                        otherHolder\r\n                    ])\r\n                }\r\n            } else {\r\n                isLeft = false\r\n                curSpacing = 0\r\n                spacingTimes = 0 \r\n                rowItem.isMiddle = true\r\n            }\r\n            this.totalRowList.push(curList)\r\n            this.totalItemList.push(rowItem)\r\n        })\r\n        var middleHolder = new BaseUIElement([\r\n            new Property('position: absolute'),\r\n            new Property('top: 0px'),\r\n            new Property('height: 100%'),\r\n            new Property('right: calc(' + curSpacing + 'px + ( ' + spacingTimes + ' * var(--spacing)))'),\r\n            new Property('width: ' + 'calc(100% - (' + totalSize + 'px + (' + totalSpacing + ' * var(--spacing))))'),\r\n        ])\r\n\r\n        this.totalItemList.find(function(item) {\r\n            return (item.isMiddle == true)\r\n        }).holder = middleHolder\r\n\r\n        middleHolder.appendList([\r\n            new BaseUIElement(\r\n                this.generateProps(50, true, this.holder.element.getBoundingClientRect().height, '0px')\r\n            )\r\n        ])\r\n\r\n        this.holder.appendList([\r\n            middleHolder\r\n        ])\r\n    }\r\n    reorganize(totalObjs) {\r\n        console.log(totalObjs)\r\n        console.log(this.totalItemList)\r\n        totalObjs.forEach((obj, index) => {\r\n            if (obj.items != undefined) {\r\n                obj.items.forEach((item, itemIndex) => {\r\n                    var itemList = this.totalItemList.find(\r\n                        function(val) {\r\n                            var isFound = false\r\n                            val.items.forEach(function(itemOther) {\r\n                                if (itemOther.uniqueId == item.uniqueId) {\r\n                                    isFound = true\r\n                                }\r\n                            })\r\n                            return isFound\r\n                        }\r\n                    )\r\n                    var baseItem = itemList.items.find(\r\n                        function(val) {\r\n                            if (val.uniqueId == item.uniqueId) {\r\n                                return true\r\n                            }\r\n                        }\r\n                    )\r\n                    if (this.totalItemList.indexOf(itemList) == totalObjs.indexOf(obj)) {\r\n                        var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                        var heightTotal = (itemList.holder.element.getBoundingClientRect().height) - ((obj.items.length-1) * spacingTotal)    \r\n                        baseItem.element.style.height = (heightTotal*item.height) + 'px'\r\n                        var heightHandler = 0\r\n                        for (var itemOther in obj.items) {\r\n                            itemOther = obj.items[itemOther]\r\n                            if (item.uniqueId == itemOther.uniqueId) {\r\n                                break\r\n                            } else {\r\n                                heightHandler = heightHandler + (heightTotal * itemOther.height) + spacingTotal\r\n                            }\r\n                        }\r\n                        baseItem.element.style.setProperty('--top-before', heightHandler + 'px')\r\n                        baseItem.element.style.setProperty('--top-after', heightHandler + 'px')\r\n                    } else {\r\n                        itemList.items.splice(itemList.items.indexOf(baseItem), 1)\r\n                        this.totalItemList[index].items.splice(itemIndex, 0, baseItem)\r\n                        var spacingTotal = Number(document.body.style.getPropertyValue('--spacing').split('px')[0])\r\n                        var heightTotal = (itemList.holder.element.getBoundingClientRect().height) - ((obj.items.length-1) * spacingTotal)    \r\n                        baseItem.element.style.height = (heightTotal*item.height) + 'px'\r\n                        baseItem.element.remove()\r\n                        var heightHandler = 0\r\n                        for (var itemOther in obj.items) {\r\n                            itemOther = obj.items[itemOther]\r\n                            if (item.uniqueId == itemOther.uniqueId) {\r\n                                break\r\n                            } else {\r\n                                heightHandler = heightHandler + (heightTotal * itemOther.height) + spacingTotal\r\n                            }\r\n                        }\r\n                        baseItem.element.style.setProperty('--top-before', heightHandler + 'px')\r\n                        baseItem.element.style.setProperty('--top-after', heightHandler + 'px')\r\n                        if (this.totalItemList[index].isLeft == true) {\r\n                            baseItem.element.style.setProperty('--left-before', '-100%')\r\n                            baseItem.element.style.setProperty('--left-after', '0px')\r\n                            baseItem.element.style.setProperty('--right-before', 'none')\r\n                            baseItem.element.style.setProperty('--right-after', 'none')\r\n\r\n                            baseItem.element.style.setProperty('border-top-right-radius', 'var(--spacing)')\r\n                            baseItem.element.style.setProperty('border-bottom-right-radius', 'var(--spacing)')\r\n                            baseItem.element.style.setProperty('border-top-left-radius', '0px')\r\n                            baseItem.element.style.setProperty('border-bottom-left-radius', '0px')\r\n                        } else {\r\n                            baseItem.element.style.setProperty('--right-before', '-100%')\r\n                            baseItem.element.style.setProperty('--right-after', '0px')\r\n                            baseItem.element.style.setProperty('--left-before', 'none')\r\n                            baseItem.element.style.setProperty('--left-after', 'none')\r\n                            baseItem.element.style.setProperty('border-top-right-radius', '0px')\r\n                            baseItem.element.style.setProperty('border-bottom-right-radius', '0px')\r\n                            baseItem.element.style.setProperty('border-top-left-radius', 'var(--spacing)')\r\n                            baseItem.element.style.setProperty('border-bottom-left-radius', 'var(--spacing)')\r\n                        }\r\n                        this.totalItemList[index].holder.element.appendChild(baseItem.element)\r\n                        baseItem.originalParent = this.totalItemList[index].holder\r\n                        baseItem.rowIndex = index\r\n                        this.totalItemList[index].destroyed = undefined\r\n                    }\r\n                })\r\n                if (obj.isMiddle != true && obj.items.length == 0) {\r\n                    this.totalItemList[index].destroyed = true\r\n                }\r\n                var middle = this.totalItemList.find(function(val)  { return (val.isMiddle == true) })\r\n                var totalSpacing = 0\r\n                var rightWidth = 0\r\n                var rightSpacing = 0\r\n                var totalWidth = 0\r\n                this.totalItemList.forEach(function(item) {\r\n                    if (item.isMiddle != true) {\r\n                        if (item.destroyed != true) {\r\n                            totalWidth += Number(item.holder.element.style.width.split('px')[0])\r\n                            totalSpacing += 1\r\n                        }\r\n                        if (item.isLeft == false && item.destroyed != true) {\r\n                            rightSpacing += 1\r\n                            rightWidth += Number(item.holder.element.style.width.split('px')[0])\r\n                        }\r\n                    }\r\n                })\r\n                if (totalSpacing == 1) {\r\n                    totalSpacing = 2\r\n                }\r\n                if (rightSpacing == 0) {\r\n                    rightSpacing = 1\r\n                }\r\n                middle.holder.element.style.right = 'calc(' + rightWidth + 'px + ( ' + rightSpacing + ' * var(--spacing)))'\r\n                middle.holder.element.style.width = 'calc(100% - (' + totalWidth + 'px + (' + totalSpacing + ' * var(--spacing))))'\r\n            }\r\n        })\r\n    }\r\n    handleDragFunctionality() {\r\n        this.totalRowList.forEach((rows) => {\r\n            rows.forEach((row) => {\r\n                row.title.element.onmousedown = async (e) => {\r\n                    var otherDat = await onDrag({x: e.clientX, y: e.clientY}, row, this.baseUI)\r\n                    this.baseUI = otherDat\r\n                    this.reorganize(otherDat)\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\nmodule.exports = {\r\n    TopUI,\r\n    MiddleUI,\r\n    Windows,\r\n    prepareSettings,\r\n    LeftUI,\r\n    RightUI,\r\n    TitleBar,\r\n    Button,\r\n    intialAnimation,\r\n    showLoader\r\n}\n\n//# sourceURL=webpack:///./ui/editor/viewerElements.js?");

/***/ }),

/***/ "./ui/flow/index.js":
/*!**************************!*\
  !*** ./ui/flow/index.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var uiElements = __webpack_require__(/*! ./uiElements */ \"./ui/flow/uiElements.js\")\r\nvar viewerElements = __webpack_require__(/*! ../editor/viewerElements */ \"./ui/editor/viewerElements.js\")\r\nvar { beginObserving, handleColor } = __webpack_require__(/*! ../editor/colorEngine */ \"./ui/editor/colorEngine.js\");\r\nconst { Property, generateAnimation } = __webpack_require__(/*! ../shared/ui */ \"./ui/shared/ui.js\");\r\nvar { handleColor } = __webpack_require__(/*! ../editor/colorEngine */ \"./ui/editor/colorEngine.js\")\r\nvar { IntroductionPanel, ThemePanel, GuestAccountPanel, FinishedPanel } = __webpack_require__(/*! ./introFlow */ \"./ui/flow/introFlow.js\")\r\nvar { LoadingSpinner } = __webpack_require__(/*! ../shared/uiComponents */ \"./ui/shared/uiComponents.js\")\r\n\r\nfunction ready(fn) {\r\n    if (document.readyState != 'loading'){\r\n        fn();\r\n    } else {\r\n        document.addEventListener('DOMContentLoaded', fn);\r\n    }\r\n}\r\n\r\nready(async function() {\r\n    viewerElements.intialAnimation()\r\n    viewerElements.prepareSettings({\r\n        'spacing': '7.5px',\r\n        'accented-color': 'red'\r\n    })\r\n    if (window.localStorage.getItem('color-theme') == null) {\r\n        window.localStorage.setItem('color-theme', '#222222')\r\n    }\r\n    document.body.style.setProperty('background-color', window.localStorage.getItem('color-theme'))\r\n    handleColor(window.localStorage.getItem('color-theme'))\r\n    var cookie = new URLSearchParams(document.cookie.replaceAll('; ', '&'))\r\n    console.log(cookie.get('state'))\r\n    if (cookie.get('state') == null) {\r\n        var mainBtn = new uiElements.RobloxButton([\r\n            new Property('margin-top: 27.5px')\r\n        ])\r\n            .bind('click', function() {\r\n                mainBtn.element.getElementsByClassName(\"innerElements\")[0].style.opacity = '0'\r\n                generateAnimation('fadeSpinner', [\r\n                    {\r\n                        percent: 0,\r\n                        props: [\r\n                            new Property('opacity: 0')\r\n                        ]\r\n                    },\r\n                    {\r\n                        percent: 100,\r\n                        props: [\r\n                            new Property('opacity: 1')\r\n                        ]\r\n                    }\r\n                ])\r\n                var loader = new LoadingSpinner([\r\n                    new Property('width: 30px'),\r\n                    new Property('height: 30px'),\r\n                    new Property('position: absolute'),\r\n                    new Property('transform: translate(-50%, -50%)'),\r\n                    new Property('left: 50%'),\r\n                    new Property('opacity: 0'),\r\n                    new Property('animation: fadeSpinner 0.3s forwards'),\r\n                    new Property('top: 50%'),\r\n                ])\r\n                loader.primaryLoader.element.style.backgroundColor = \"rgb(var(--text-color))\"\r\n                loader.appendTo(mainBtn.element)\r\n                window.location.href = '/flow/continue/'\r\n            })\r\n        var holder = new uiElements.BaseHolder([\r\n        ])\r\n            .appendTo(document.body)\r\n            .appendList([\r\n                new uiElements.MainText()\r\n                    .setInnerHTML(\"Welcome<br>\" + uiElements.switchToRegularText('Sign in with your Roblox account to continue')),\r\n                mainBtn\r\n            ])    \r\n    } else {\r\n        var finalResponse = await fetch('/api/retrieve-info', {\r\n            credentials: 'include',\r\n            method: \"GET\"\r\n        })\r\n            .then(res => res.json())\r\n        console.log(finalResponse)\r\n        var panel = new IntroductionPanel(finalResponse.name, finalResponse.picture)\r\n            .appendTo(document.body)\r\n        panel.mainButton.bind('click', function() {\r\n            panel.mainButton.element.pointerEvents = 'none'\r\n            panel.animateOut()\r\n            var theme = new ThemePanel(\r\n                function(color) {\r\n                    document.body.style.backgroundColor = color\r\n                    handleColor(color)\r\n                }\r\n            )\r\n            theme.animateInTransition()\r\n            theme.mainButton.bind('click', function() {\r\n                theme.mainButton.element.pointerEvents = 'none'\r\n                theme.animateOut()\r\n                var guest = new GuestAccountPanel()\r\n                    .appendTo(document.body)\r\n                guest.animateInTransition()\r\n                guest.noButton.bind('click', function() {\r\n                    guest.noButton.element.pointerEvents = 'none'\r\n                    guest.animateOut()\r\n                    var finished = new FinishedPanel()\r\n                        .appendTo(document.body)\r\n                    finished.animateInTransition()\r\n                    finished.mainButton.bind('click', function() {\r\n                        finished.mainButton.element.style.height = '40px'\r\n                        finished.mainButton.element.style.pointerEvents = 'none'\r\n                        finished.mainButton.element.innerHTML = \"\"\r\n                        generateAnimation('fadeSpinner', [\r\n                            {\r\n                                percent: 0,\r\n                                props: [\r\n                                    new Property('opacity: 0')\r\n                                ]\r\n                            },\r\n                            {\r\n                                percent: 100,\r\n                                props: [\r\n                                    new Property('opacity: 1')\r\n                                ]\r\n                            }\r\n                        ])\r\n                        var loader = new LoadingSpinner([\r\n                            new Property('width: 30px'),\r\n                            new Property('height: 30px'),\r\n                            new Property('position: absolute'),\r\n                            new Property('transform: translate(-50%, -50%)'),\r\n                            new Property('left: 50%'),\r\n                            new Property('opacity: 0'),\r\n                            new Property('animation: fadeSpinner 0.3s forwards'),\r\n                            new Property('top: 50%'),\r\n                        ])\r\n                        loader.primaryLoader.element.style.backgroundColor = \"rgb(var(--text-color))\"\r\n                        loader.appendTo(finished.mainButton.element)\r\n                        window.location.href = '/'      \r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n})\n\n//# sourceURL=webpack:///./ui/flow/index.js?");

/***/ }),

/***/ "./ui/flow/introFlow.js":
/*!******************************!*\
  !*** ./ui/flow/introFlow.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var uiElements = __webpack_require__(/*! ./uiElements */ \"./ui/flow/uiElements.js\")\r\nvar viewerElements = __webpack_require__(/*! ../editor/viewerElements */ \"./ui/editor/viewerElements.js\")\r\nvar { beginObserving, handleColor } = __webpack_require__(/*! ../editor/colorEngine */ \"./ui/editor/colorEngine.js\");\r\nconst { Property, generateAnimation, BaseUIElement } = __webpack_require__(/*! ../shared/ui */ \"./ui/shared/ui.js\");\r\n\r\nfunction getTextWidth(text, font) {\r\n    const canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\r\n    const context = canvas.getContext(\"2d\");\r\n    context.font = font;\r\n    const metrics = context.measureText(text);\r\n    return metrics.width;\r\n}\r\n\r\nclass ProfilePicture extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('width: 80px'),\r\n            new Property('height: 80px'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('position: relative'),\r\n            new Property('left: 50%'),\r\n            new Property('margin-bottom: 5px'),\r\n            new Property('border-radius: 50%')\r\n        ]\r\n    }\r\n}\r\nclass IntroductionPanel {\r\n    constructor(userName, profileImage) {\r\n        this.mainElement = new uiElements.BaseHolder()\r\n        var text = new uiElements.MainText()\r\n        text.setInnerHTML(\"Welcome, \" + userName + \"!<br>\" + uiElements.switchToRegularText(\"Let's finish setting up RoEditor and customizing your experience.\"))\r\n        console.log((text.element.style.fontWeight || 'normal') + ' ' + (text.element.style.fontSize || '16px') + ' ' + (text.element.style.fontFamily || 'Times New Roman'))\r\n        var totalMiddle = getTextWidth(\"Welcome, \" + userName + \"!\", (text.element.style.fontWeight || 'normal') + ' ' + (text.element.style.fontSize || '16px') + ' ' + (text.element.style.fontFamily || 'Times New Roman') )\r\n        totalMiddle += (27.5) * 2\r\n        this.mainElement.element.style.width = totalMiddle + 'px'\r\n        this.mainElement.mainButton = new viewerElements.Button([\r\n            new Property('width', '85px'),\r\n            new Property('text-align', 'center'),\r\n            new Property('line-height', '40px'),\r\n            new Property('position: relative'),\r\n            new Property('margin-top: 20px'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: calc(100% - 40px)'),\r\n            new Property('color', 'rgb(var(--text-color))'),\r\n            new Property('font-size', '20px')\r\n        ])\r\n            .setInnerHTML(\"Next\")\r\n        this.mainElement.appendList([\r\n            new ProfilePicture([], 'img').setImgSrc(profileImage),\r\n            text,\r\n            this.mainElement.mainButton,\r\n        ])\r\n        return this.mainElement\r\n    }\r\n}\r\n\r\nclass FinishedPanel {\r\n    constructor() {\r\n        this.mainElement = new uiElements.BaseHolder()\r\n        var text = new uiElements.MainText()\r\n        text.setInnerHTML(\"Finished<br>\" + uiElements.switchToRegularText(\"You're done with the setup, now it's time to edit your experiences.\"))\r\n        this.mainElement.element.style.width = '350px'\r\n        this.mainElement.mainButton = new viewerElements.Button([\r\n            new Property('width', '85px'),\r\n            new Property('text-align', 'center'),\r\n            new Property('line-height', '40px'),\r\n            new Property('position: relative'),\r\n            new Property('margin-top: 20px'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: calc(100% - 40px)'),\r\n            new Property('color', 'rgb(var(--text-color))'),\r\n            new Property('font-size', '20px')\r\n        ])\r\n            .setInnerHTML(\"Next\")\r\n        this.mainElement.appendList([\r\n            text,\r\n            this.mainElement.mainButton\r\n        ])\r\n        return this.mainElement\r\n    }\r\n}\r\n\r\n\r\nclass GuestAccountPanel {\r\n    constructor() {\r\n        this.mainElement = new uiElements.BaseHolder()\r\n        var text = new uiElements.MainText()\r\n        text.setInnerHTML(\"Guest Account<br>\" + uiElements.switchToRegularText(\"Would you like to setup a alternate account for services like team create and game testing?\" + `<br><div style=\"font-size: 15px; font-style: italic;\">This doesn't require a password but requires you to solve a captcha in order to create a new account</div>`))\r\n        this.mainElement.element.style.width = '350px'\r\n        this.mainElement.yesButton = new viewerElements.Button([\r\n            new Property('width', '85px'),\r\n            new Property('text-align', 'center'),\r\n            new Property('line-height', '40px'),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('background-color: rgb(var(--lighter-color))'),\r\n            new Property('left: calc(50% + 47.5px)'),\r\n            new Property('color', 'rgb(var(--text-color))'),\r\n            new Property('font-size', '20px')\r\n        ])\r\n            .setInnerHTML(\"Yes\")\r\n        this.mainElement.noButton = new viewerElements.Button([\r\n            new Property('width', '85px'),\r\n            new Property('text-align', 'center'),\r\n            new Property('line-height', '40px'),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('left: calc(50% - 47.5px)'),\r\n            new Property('color', 'rgb(var(--text-color))'),\r\n            new Property('font-size', '20px')\r\n        ])\r\n            .setInnerHTML(\"No\")\r\n        this.mainElement.noButton.element.style.backgroundColor = 'rgba(var(--shadow-color), 0.3)'\r\n        this.mainElement.appendList([\r\n            text,\r\n            new BaseUIElement([\r\n                new Property('margin-top: 20px'),\r\n                new Property('height: 40px'),\r\n                new Property('width: 100%')\r\n            ])\r\n                .appendList([\r\n                    this.mainElement.noButton,\r\n                    this.mainElement.yesButton\r\n                ])\r\n        ])\r\n        return this.mainElement\r\n    }\r\n}\r\n\r\n\r\nfunction nameToRgba(name) {\r\n    var canvas = document.createElement('canvas');\r\n    var context = canvas.getContext('2d');\r\n    context.fillStyle = name;\r\n    context.fillRect(0,0,1,1);\r\n    return context.getImageData(0,0,1,1).data;\r\n}\r\n\r\nfunction getBackgroundColorAsHSV() {\r\n    var color = nameToRgba(document.body.style.backgroundColor)\r\n\r\n    var r = color[0]\r\n    var g = color[1]\r\n    var b = color[2]\r\n    r /= 255, g /= 255, b /= 255;\r\n\r\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n    var h, s, v = max;\r\n  \r\n    var d = max - min;\r\n    s = max == 0 ? 0 : d / max;\r\n  \r\n    if (max == min) {\r\n      h = 0; // achromatic\r\n    } else {\r\n      switch (max) {\r\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n        case g: h = (b - r) / d + 2; break;\r\n        case b: h = (r - g) / d + 4; break;\r\n      }\r\n  \r\n      h /= 6;\r\n    }\r\n  \r\n    return [ h, s, v ];\r\n}\r\n\r\nfunction hsvToRgb(h, s, v) {\r\n    s /= 100;\r\n    v /= 100;\r\n    const c = v * s;\r\n    const hh = h / 60;\r\n    const x = c * (1 - Math.abs((hh % 2) - 1));\r\n    let [r1, g1, b1] = [0, 0, 0];\r\n  \r\n    if      (hh >= 0 && hh < 1) [r1,g1,b1] = [c, x, 0];\r\n    else if (hh >= 1 && hh < 2) [r1,g1,b1] = [x, c, 0];\r\n    else if (hh >= 2 && hh < 3) [r1,g1,b1] = [0, c, x];\r\n    else if (hh >= 3 && hh < 4) [r1,g1,b1] = [0, x, c];\r\n    else if (hh >= 4 && hh < 5) [r1,g1,b1] = [x, 0, c];\r\n    else if (hh >= 5 && hh < 6) [r1,g1,b1] = [c, 0, x];\r\n  \r\n    const m = v - c;\r\n    return {\r\n      r: Math.round((r1 + m) * 255),\r\n      g: Math.round((g1 + m) * 255),\r\n      b: Math.round((b1 + m) * 255)\r\n    };\r\n  }\r\n  \r\nclass ThemePanel {\r\n    constructor(onUpdate) {\r\n        this.mainElement = new uiElements.BaseHolder()\r\n        var text = new uiElements.MainText()\r\n        text.setInnerHTML(\"Theme<br>\" + uiElements.switchToRegularText(\"You are able to customize the theme of RoEditor.\"))\r\n        this.mainElement.element.style.width = '350px'\r\n\r\n        var hsv =  getBackgroundColorAsHSV()\r\n        var hue = hsv[0]*360\r\n        var sat = hsv[1]*100\r\n        var val = hsv[2]*100\r\n\r\n        this.mainElement.svCanvas = new BaseUIElement([\r\n            new Property(\"background-color: rgb(var(--lighter-color))\"),\r\n            new Property(\"height: 100%\"),\r\n            new Property(\"width: 100%\"),\r\n            new Property(\"border-radius: var(--spacing)\")\r\n        ], 'canvas')\r\n        this.mainElement.hueCursor = new BaseUIElement([\r\n            new Property(\"height: 30px\"),\r\n            new Property(\"position: absolute\"),\r\n            new Property(\"margin-top: -2.5px\"),\r\n            new Property(\"width: 5px\"),\r\n            new Property(\"filter: drop-shadow(2px 4px 6px black)\"),\r\n            new Property(\"border-radius: var(--spacing)\"),\r\n            new Property(\"background-color: white\")\r\n        ])\r\n        this.mainElement.cursor = new BaseUIElement([\r\n            new Property(\"width: 20px\"),\r\n            new Property(\"height: 20px\"),\r\n            new Property(\"z-index: 10\"),\r\n            new Property(\"position: absolute\"),\r\n            new Property(\"border-radius: 50%\"),\r\n            new Property(\"transform: translate(-50%, -50%)\"),\r\n            new Property(\"border: 2px white solid\"),\r\n            new Property(\"filter: drop-shadow(0px 0px 4px black)\")\r\n        ])\r\n        var svCtx = this.mainElement.svCanvas.element.getContext('2d')\r\n        this.updateSvCursorPos = function() {\r\n            var rect = this.mainElement.svCanvas.element.getBoundingClientRect()\r\n            var sx = sat / 100 * rect.width;\r\n            var sy = (1 - val/100) * rect.height;\r\n            this.mainElement.cursor.element.style.marginLeft = sx + 'px'\r\n            this.mainElement.cursor.element.style.marginTop = sy + 'px'\r\n            this.mainElement.hueCursor.element.style.marginLeft = (hue / 360 * rect.width) + 'px'\r\n        }\r\n        this.drawSV = function() {\r\n            svCtx.fillStyle = `hsl(${hue}, 100%, 50%)`\r\n            svCtx.fillRect(0, 0, this.mainElement.svCanvas.element.width, this.mainElement.svCanvas.element.height);\r\n      \r\n            let whiteGrad = svCtx.createLinearGradient(0,0,this.mainElement.svCanvas.element.width,0);\r\n            whiteGrad.addColorStop(0, 'rgba(255,255,255,1)');\r\n            whiteGrad.addColorStop(1, 'rgba(255,255,255,0)');\r\n            svCtx.fillStyle = whiteGrad;\r\n            svCtx.fillRect(0,0,this.mainElement.svCanvas.element.width,this.mainElement.svCanvas.element.height);\r\n      \r\n            let blackGrad = svCtx.createLinearGradient(0,0,0,this.mainElement.svCanvas.element.height);\r\n            blackGrad.addColorStop(0, 'rgba(0,0,0,0)');\r\n            blackGrad.addColorStop(1, 'rgba(0,0,0,1)');\r\n            svCtx.fillStyle = blackGrad;\r\n            svCtx.fillRect(0,0,this.mainElement.svCanvas.element.width,this.mainElement.svCanvas.element.height);      \r\n        }\r\n        this.mainElement.hueCanvas = new BaseUIElement([\r\n            new Property(\"background-color: rgb(var(--lighter-color))\"),\r\n            new Property(\"height: 100%\"),\r\n            new Property(\"width: 100%\"),\r\n            new Property(\"border-radius: var(--spacing)\")\r\n        ], 'canvas')\r\n        var hueCtx = this.mainElement.hueCanvas.element.getContext('2d')\r\n        var isMove = false\r\n        this.mainElement.hueCanvas.bind('mousedown', (e) => {\r\n            console.log('work')\r\n            var rect = this.mainElement.hueCanvas.element.getBoundingClientRect()\r\n            var x = (e.clientX - rect.left)/rect.width\r\n            if (x > 1) { x = 1 } else { if (x < 0) { x = 0 } }\r\n            hue = Math.round(x * 360)\r\n            this.drawSV()\r\n            this.updateSvCursorPos()\r\n            onUpdate(\r\n                'rgb(' + hsvToRgb(hue, sat, val).r + ', ' + hsvToRgb(hue, sat, val).g + ', ' + hsvToRgb(hue, sat, val).b + ')'\r\n            )\r\n            isMove = true\r\n        })\r\n        var isMoveSV = false\r\n        this.mainElement.svCanvas.bind('mousedown', (e) => {\r\n            var rect = this.mainElement.svCanvas.element.getBoundingClientRect()\r\n            var x = (e.clientX - rect.left)/rect.width\r\n            var y = (e.clientY - rect.top)/rect.height\r\n\r\n            x = Math.min(1, Math.max(0,x))\r\n            y = Math.min(1, Math.max(0,y))\r\n\r\n            sat = Math.round(x * 100);\r\n            val = Math.round((1 - y) * 100);\r\n\r\n            this.updateSvCursorPos()\r\n            \r\n            onUpdate(\r\n                'rgb(' + hsvToRgb(hue, sat, val).r + ', ' + hsvToRgb(hue, sat, val).g + ', ' + hsvToRgb(hue, sat, val).b + ')'\r\n            )\r\n            isMoveSV = true\r\n        })\r\n        window.addEventListener('mousemove', (e) => {\r\n            if (isMoveSV == true) {\r\n                var rect = this.mainElement.svCanvas.element.getBoundingClientRect()\r\n                var x = (e.clientX - rect.left)/rect.width\r\n                var y = (e.clientY - rect.top)/rect.height\r\n\r\n                if (x > 1) { x = 1 } else { if (x < 0) { x = 0 } }\r\n                if (y > 1) { y = 1 } else { if (y < 0) { y = 0 } }\r\n\r\n                sat = Math.round(x * 100);\r\n                val = Math.round((1 - y) * 100);\r\n\r\n                this.updateSvCursorPos()\r\n\r\n                onUpdate(\r\n                    'rgb(' + hsvToRgb(hue, sat, val).r + ', ' + hsvToRgb(hue, sat, val).g + ', ' + hsvToRgb(hue, sat, val).b + ')'\r\n                )\r\n            } else {\r\n                if (isMove == true) {\r\n                    var rect = this.mainElement.hueCanvas.element.getBoundingClientRect()\r\n                    var x = (e.clientX - rect.left)/rect.width\r\n                    if (x > 1) { x = 1 } else { if (x < 0) { x = 0 } }\r\n                    hue = Math.round(x * 360)\r\n                    this.drawSV()\r\n                    this.updateSvCursorPos()\r\n                    onUpdate(\r\n                        'rgb(' + hsvToRgb(hue, sat, val).r + ', ' + hsvToRgb(hue, sat, val).g + ', ' + hsvToRgb(hue, sat, val).b + ')'\r\n                    )\r\n                }\r\n            }\r\n        })\r\n        window.addEventListener('mouseup', () => {\r\n            isMove = false\r\n            isMoveSV = false\r\n        })\r\n        this.mainElement.mainButton = new viewerElements.Button([\r\n            new Property('width', '85px'),\r\n            new Property('text-align', 'center'),\r\n            new Property('line-height', '40px'),\r\n            new Property('position: relative'),\r\n            new Property('margin-top: 20px'),\r\n            new Property('transform: translateX(-50%)'),\r\n            new Property('left: 50%'),\r\n            new Property('top: calc(100% - 40px)'),\r\n            new Property('color', 'rgb(var(--text-color))'),\r\n            new Property('font-size', '20px')\r\n        ])\r\n            .setInnerHTML(\"Next\")\r\n        this.mainElement.appendList([\r\n            text,\r\n            new BaseUIElement([\r\n                new Property('margin-top: 20px'),\r\n                new Property('height: 120px'),\r\n                new Property('width: 100%'),\r\n            ]).appendList([this.mainElement.cursor, this.mainElement.svCanvas]),\r\n            new BaseUIElement([\r\n                new Property('margin-top: 5px'),\r\n                new Property('height: 25px'),\r\n                new Property('width: 100%'),\r\n            ]).appendList([this.mainElement.hueCursor, this.mainElement.hueCanvas]),\r\n\r\n            this.mainElement.mainButton,\r\n        ])\r\n        var rect = this.mainElement.hueCanvas.element\r\n        console.log(rect)\r\n        const gradient = hueCtx.createLinearGradient(0,0,rect.width,0);\r\n        for(let i=0; i<=360; i+=60){\r\n          gradient.addColorStop(i/360, `hsl(${i}, 100%, 50%)`);\r\n        }\r\n        hueCtx.fillStyle = gradient;\r\n        hueCtx.fillRect(0, 0, rect.width, rect.height);\r\n\r\n        this.mainElement.appendTo(document.body)\r\n        this.drawSV()\r\n        this.updateSvCursorPos()\r\n      \r\n        return this.mainElement\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    IntroductionPanel,\r\n    GuestAccountPanel,\r\n    ThemePanel,\r\n    FinishedPanel\r\n}\n\n//# sourceURL=webpack:///./ui/flow/introFlow.js?");

/***/ }),

/***/ "./ui/flow/uiElements.js":
/*!*******************************!*\
  !*** ./ui/flow/uiElements.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var { Button } = __webpack_require__(/*! ../editor/viewerElements */ \"./ui/editor/viewerElements.js\")\r\nvar { UIElementGroup, BaseUIElement, Property, generateAnimation, addNewElementWithName } = __webpack_require__(/*! ../shared/ui */ \"./ui/shared/ui.js\")\r\n\r\nclass RobloxButton {\r\n    constructor(props) {\r\n        props.push(new Property('width', '205px'))\r\n        props.push(new Property('padding-left', '40px'))\r\n        props.push(new Property('line-height', '40px'))\r\n        props.push(new Property('color', 'rgb(var(--text-color))'))\r\n        props.push(new Property('font-size', '20px'))\r\n        this.button = new Button(props)\r\n        var svgText = `<div class=\"innerElements\" style=\"transition: 0.3s\"><svg class=\"svgThing\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"25\" height=\"25\" viewBox=\"0 0 267 267\" xml:space=\"preserve\"><g xmlns=\"http://www.w3.org/2000/svg\" transform=\"matrix(4.39 0 0 4.39 133.58 133.61)\"><path style=\"stroke: none;stroke-width: 1;fill: rgb(var(--text-color));fill-rule: nonzero;opacity: 1;\" transform=\" translate(-73.13, -26.88)\" d=\"M 57.6 0 L 46.26 42.4 l 42.4 11.35 L 100 11.35 Z m 11.2 19.47 l 11.83 3.17 l -3.17 11.83 l -11.84 -3.17 z\" stroke-linecap=\"round\"/></g></svg>Continue with Roblox</div>`\r\n        this.button.element.innerHTML = svgText\r\n        this.button.element.getElementsByClassName('svgThing')[0].style.position = 'absolute'\r\n        this.button.element.getElementsByClassName('svgThing')[0].style.left = '10px'\r\n        this.button.element.getElementsByClassName('svgThing')[0].style.top = '7.5px'\r\n        return this.button\r\n    }\r\n}\r\n\r\nclass BaseHolder extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('padding: 27.5px'),\r\n            new Property('width: 245px'),\r\n            new Property('background-color: rgb(var(--accented-color))'),\r\n            new Property('border-radius: var(--spacing)'),\r\n            new Property('animation: baseTransitionIn 0.8s forwards'),\r\n            new Property('position: absolute'),\r\n            new Property('transform: translate(-50%, -50%)'),\r\n            new Property('top: 50%'),\r\n            new Property('left: 50%')\r\n        ]\r\n    }\r\n    animateInTransition() {\r\n        generateAnimation('transitionUpIn', [\r\n            {\r\n                percent: 0,\r\n                props: [\r\n                    new Property('transform: translate(-50%, -50%) scale(0.8)'),\r\n                    new Property('top: 55%'),\r\n                    new Property('opacity: 0'),\r\n                ]\r\n            },\r\n            {\r\n                percent: 100,\r\n                props: [\r\n                    new Property('transform: translate(-50%, -50%) scale(1)'),\r\n                    new Property('top: 50%'),\r\n                    new Property('opacity: 1'),\r\n                ]\r\n            }\r\n        ])\r\n        this.element.style.animation = 'transitionUpIn 0.8s forwards'\r\n    }\r\n    async animateOut() {\r\n        generateAnimation('transitionUpOut', [\r\n            {\r\n                percent: 0,\r\n                props: [\r\n                    new Property('transform: translate(-50%, -50%) scale(1)'),\r\n                    new Property('top: 50%'),\r\n                    new Property('opacity: 1'),\r\n                ]\r\n            },\r\n            {\r\n                percent: 100,\r\n                props: [\r\n                    new Property('transform: translate(-50%, -50%) scale(0.8)'),\r\n                    new Property('top: 45%'),\r\n                    new Property('opacity: 0'),\r\n                ]\r\n            }\r\n        ])\r\n        this.element.style.animation = 'transitionUpOut 0.8s forwards'\r\n        await new Promise(resolve => setTimeout(resolve, 800));\r\n        this.element.remove()\r\n    }\r\n}\r\n\r\n\r\nclass MainText extends BaseUIElement {\r\n    baseProperties() {\r\n        return [\r\n            new Property('text-align: center'),\r\n            new Property('font-family: \"Quicksand\"'),\r\n            new Property('font-weight: bold'),\r\n            new Property('font-size: 30px'),\r\n            new Property('color', 'rgb(var(--text-color))')\r\n        ]\r\n    }\r\n}\r\n\r\nfunction switchToRegularText(text) {\r\n    return \"<div style='font-weight: normal; font-size: 20px'>\" + text + \"</div>\"\r\n}\r\n\r\nmodule.exports = {\r\n    RobloxButton,\r\n    BaseHolder,\r\n    switchToRegularText,\r\n    MainText\r\n}\n\n//# sourceURL=webpack:///./ui/flow/uiElements.js?");

/***/ }),

/***/ "./ui/shared/baseElements.js":
/*!***********************************!*\
  !*** ./ui/shared/baseElements.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var { UIElementGroup, BaseUIElement, Property, generateAnimation, addNewElementWithName } = __webpack_require__(/*! ./ui */ \"./ui/shared/ui.js\")\r\n\r\nfunction addAnimation(name, duration) {\r\n    return [\r\n        new Property('animation-name', name),\r\n        new Property('animation-duration', duration),\r\n        new Property('animation-fill-mode', 'forwards')\r\n    ]\r\n}\r\n\r\nmodule.exports = {\r\n    addAnimation,\r\n}\n\n//# sourceURL=webpack:///./ui/shared/baseElements.js?");

/***/ }),

/***/ "./ui/shared/ui.js":
/*!*************************!*\
  !*** ./ui/shared/ui.js ***!
  \*************************/
/***/ ((module) => {

eval("\r\n/*\r\n    Dynamically generates CSS Animations\r\n    Useful for on the fly create animations for specific or multiple animations\r\n\r\n    Name: <animation-name>\r\n    Format: \r\n    [\r\n        {\r\n            percent: <percentage of animation>\r\n            props: {\r\n                'filter': 'blur(100px)'\r\n            }\r\n        }\r\n    ]\r\n*/\r\nfunction generateAnimation(name, format) {\r\n    var style = document.querySelector(\"[library='ui']\")\r\n    if (style == null) {\r\n        style = document.createElement('style')\r\n        style.type = 'text/css';\r\n        style.setAttribute('library', 'ui')\r\n        var textAdd = ''\r\n        textAdd += '@keyframes ' + name + ' { '\r\n        format.forEach(function(data) {\r\n            textAdd += data.percent + '% { '\r\n            for (var property in data.props) {\r\n                textAdd += data.props[property].property + '; '\r\n            }\r\n            textAdd += '} '\r\n        })\r\n        textAdd += '} '\r\n        style.innerHTML = textAdd\r\n        document.getElementsByTagName('head')[0].appendChild(style)\r\n    } else {\r\n        if (!style.innerHTML.includes('@keyframes ' + name)) {\r\n            var textAdd = ''\r\n            textAdd += '@keyframes ' + name + ' { '\r\n            format.forEach(function(data) {\r\n                textAdd += data.percent + '% { '\r\n                for (var property in data.props) {\r\n                    textAdd += data.props[property].property + '; '\r\n                }\r\n                textAdd += '} '\r\n            }), \r\n            textAdd += '} '\r\n            style.innerHTML += textAdd    \r\n        }\r\n    }\r\n}\r\n\r\nfunction addNewElementWithName(name, format) {\r\n    var style = document.querySelector(\"[library='ui']\")\r\n    if (style == null) {\r\n        style = document.createElement('style')\r\n        style.type = 'text/css';\r\n        style.setAttribute('library', 'ui')\r\n        var textAdd = ''\r\n        textAdd += name + ' { '\r\n        format.forEach(function(data) {\r\n            textAdd += data.property + '; '\r\n        }), \r\n        textAdd += '} '\r\n        style.innerHTML += textAdd\r\n        document.getElementsByTagName('head')[0].appendChild(style)\r\n    } else {\r\n        var textAdd = ''\r\n        textAdd += name + ' { '\r\n        format.forEach(function(data) {\r\n            textAdd += data.property + '; '\r\n        }), \r\n        textAdd += '} '\r\n        style.innerHTML += textAdd\r\n    }\r\n}\r\n\r\nfunction parseAndAddElementData(cssData) {\r\n    var curProps = []\r\n    var curElementName = \"\"\r\n    console.log(cssData)\r\n    cssData.split('\\n').forEach(function(line) {\r\n        if (line.includes('{')) {\r\n            var chars = line.split('')\r\n            var firstSpace = false\r\n            var previousSpaces = ''\r\n            for (var char in chars) {\r\n                char = chars[char]\r\n                if (char == '{') {\r\n                    break\r\n                } else {\r\n                    if (char == ' ') {\r\n                        if (firstSpace == true) {\r\n                            previousSpaces += ' '\r\n                        }\r\n                    } else {\r\n                        curElementName = curElementName + previousSpaces + char\r\n                        firstSpace = true\r\n                        previousSpaces = ''\r\n    \r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (line.includes(';')) {\r\n                var chars = line.split('')\r\n                var currentProp = ''\r\n                var indexData = 0\r\n                for (var char in chars) {\r\n                    char = chars[char]\r\n                    if (char != ' ') {\r\n                        currentProp = chars.slice(indexData).join('')\r\n                        break\r\n                    }\r\n                    indexData += 1\r\n                }\r\n                curProps.push(new Property(currentProp.split(';')[0]))\r\n            } else {\r\n                if (line.includes('}')) {\r\n                    console.log(curElementName)\r\n                    console.log(curProps)\r\n                    addNewElementWithName(curElementName, curProps)\r\n                    curProps = []\r\n                    curElementName = \"\"\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nclass BaseUIElement {\r\n    constructor(propertyList, type) {\r\n        if (propertyList == undefined) {\r\n            propertyList = []\r\n        }\r\n        if (type == undefined) {\r\n            type = 'div'\r\n        }\r\n        this.element = document.createElement(type)\r\n        if (typeof(this.baseProperties) == 'function') {\r\n            propertyList = propertyList.concat(this.baseProperties())\r\n        }\r\n        this.children = []\r\n        this.id = 0\r\n        propertyList.forEach((val) => {\r\n            this.element.style.setProperty(val.name, val.value)\r\n        })\r\n        return this\r\n    }\r\n    setId(id) {\r\n        this.element.id = id\r\n        return this\r\n    }\r\n    bind(type, callback) {\r\n        this.element.addEventListener(type, callback)\r\n        return this\r\n    }\r\n    appendList(list) {\r\n        list.forEach((child) => {\r\n            this.children.push(child)\r\n            this.element.appendChild(child.element)\r\n        })\r\n        return this\r\n    }\r\n    appendTo(element) {\r\n        if (element.element != undefined) {\r\n            element.element.appendChild(this.element)\r\n        } else {\r\n            element.appendChild(this.element)\r\n        }\r\n        return this\r\n    } \r\n    setInnerHTML(text) {\r\n        this.element.innerHTML = text\r\n        return this\r\n    }\r\n    updateProperties(props) {\r\n        props.forEach((val) => {\r\n            this.element.style.setProperty(val.name, val.value)\r\n        })\r\n        return this\r\n    }\r\n    setImgSrc(src) {\r\n        this.element.src = src\r\n        return this\r\n    }\r\n    updateProperty(prop) {\r\n        this.element.style.setProperty(prop.name, prop.value)\r\n        return this\r\n    }\r\n    setClass(className) {\r\n        this.element.className = className\r\n        return this\r\n    }\r\n}\r\n\r\nclass UIElementGroup {\r\n    constructor(list) {\r\n        this.mainList = list\r\n    }\r\n    appendTo(element) {\r\n        this.mainList.forEach(function(item) {\r\n            item.appendTo(element)\r\n        })\r\n    }\r\n    getItemById(id) {\r\n        var finalReturn = undefined\r\n        function findItem(children) {\r\n            children.forEach(function(child) {\r\n                if (child.id == id) {\r\n                    finalReturn = child\r\n                } else {\r\n                    if (child.children.length > 0) {\r\n                        findItem(child.children)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        this.mainList.forEach(function(item) {\r\n            if (item.children.length > 0) {\r\n                findItem(item.children)\r\n            }\r\n        })\r\n        return finalReturn\r\n    }\r\n}\r\n\r\n\r\nclass Property {\r\n    constructor(property, value) {\r\n        if (property.includes(': ') || value == undefined) {\r\n            this.property = property\r\n            this.name = property.split(': ')[0]\r\n            this.value = property.split(': ')[1]\r\n        } else {\r\n            this.property = property + ': ' + value\r\n            this.name = property\r\n            this.value = value\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    generateAnimation,\r\n    UIElementGroup,\r\n    addNewElementWithName,\r\n    parseAndAddElementData,\r\n    BaseUIElement,\r\n    Property\r\n}\n\n//# sourceURL=webpack:///./ui/shared/ui.js?");

/***/ }),

/***/ "./ui/shared/uiComponents.js":
/*!***********************************!*\
  !*** ./ui/shared/uiComponents.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nvar { BaseUIElement, generateAnimation, Property } = __webpack_require__(/*! ./ui */ \"./ui/shared/ui.js\")\r\n\r\nfunction prepareSvgFilter() {\r\n    if (document.querySelector('[typeElement=\"svgFilter\"]') == null) {\r\n        document.head.insertAdjacentHTML('afterbegin', `<svg style=\"visibility: hidden; position: absolute;\" width=\"0\" height=\"0\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\r\n  <defs>\r\n        <filter id=\"roundedPath\"><feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"4\" result=\"blur\" />    \r\n            <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 19 -9\" result=\"roundedPath\" />\r\n            <feComposite in=\"SourceGraphic\" in2=\"roundedPath\" operator=\"atop\"/>\r\n        </filter>\r\n    </defs>\r\n</svg>`)\r\n    }\r\n}\r\n\r\nclass LoadingSpinner extends BaseUIElement {\r\n    baseProperties() {\r\n        prepareSvgFilter()\r\n        generateAnimation('loadingAnimMain', [\r\n            {\r\n                percent: 0,\r\n                props: [\r\n                    new Property('clip-path: polygon(50% 0%, 50% 0%, 50% 100%, 50% 100%)')\r\n                ]\r\n            },\r\n            {\r\n                percent: 25,\r\n                props: [\r\n                    new Property('clip-path: polygon(50% 0%, 50% 0%, 100% 100%, 0% 100%)')\r\n                ]\r\n            },\r\n            {\r\n                percent: 50,\r\n                props: [\r\n                    new Property('clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)')\r\n                ]\r\n            },\r\n            {\r\n                percent: 75,\r\n                props: [\r\n                    new Property('clip-path: polygon(0% 0%, 100% 0%, 50% 100%, 50% 100%)')\r\n                ]\r\n            },\r\n            {\r\n                percent: 100,\r\n                props: [\r\n                    new Property('clip-path: polygon(50% 0%, 50% 0%, 50% 100%, 50% 100%)')\r\n                ]\r\n            }\r\n        ])\r\n        generateAnimation('loadingAnimHolder', [\r\n            {\r\n                percent: 0,\r\n                props: [\r\n                    new Property('opacity: 0')\r\n                ]\r\n            },\r\n            {\r\n                percent: 25,\r\n                props: [\r\n                    new Property('opacity: 1')\r\n                ]\r\n            },\r\n            {\r\n                percent: 75,\r\n                props: [\r\n                    new Property('opacity: 1')\r\n                ]\r\n            },\r\n            {\r\n                percent: 100,\r\n                props: [\r\n                    new Property('opacity: 0')\r\n                ]\r\n            }\r\n        ])\r\n\r\n        this.primaryLoader = new BaseUIElement([\r\n            new Property('animation: loadingAnimMain 1s infinite linear'),\r\n            new Property('width: 100%'),\r\n            new Property('height: 100%'),\r\n            new Property('background-color: rgb(var(--lighter-color))'),\r\n        ])\r\n            .appendTo(this.element)\r\n\r\n        return [\r\n            new Property('animation: loadingAnimHolder 1s infinite linear'),\r\n            new Property('filter: url(#roundedPath)')\r\n        ]\r\n    }\r\n}\r\n\r\nmodule.exports =  {\r\n    LoadingSpinner\r\n}\n\n//# sourceURL=webpack:///./ui/shared/uiComponents.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./ui/flow/index.js");
/******/ 	
/******/ })()
;